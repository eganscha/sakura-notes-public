<?php

namespace App\Models;

use Illuminate\Support\Facades\Redis;
use Illuminate\Support\Facades\Log;
use JsonException;

class NoteModel
{
    private const LARAVEL_KEY_PREFIX = 'note:'; // For storage inside the Laravel-DB: note:{id}
    private string $id;         // UUID generated by Laravel
    private string $email;      // email; (SELF IS QUERYABLE BY THIS!)
    private string $content;    // content of the note itself
    private array $tags;        // tags associated with that note; (SELF IS QUERYABLE BY THIS!)

    public function __construct(string $id, string $email, string $content, array $tags)
    {
        $this->id = $id;
        $this->email = $email;
        $this->content = $content;
        $this->tags = $tags;
    }

    public function getId(): string
    {
        return $this->id;
    }

    public function getEmail(): string
    {
        return $this->email;
    }

    public function getContent(): string
    {
        return $this->content;
    }

    public function getTags(): array
    {
        return $this->tags;
    }

    /**
     * 'Finds' a single note in the redis-db based on the provided note-id or null if no valid one was found
     */
    public static function find(string $id) : ?NoteModel
    {
        // Retrieves a note as a JSON Object from the Redis-DB
        $json = Redis::get(self::LARAVEL_KEY_PREFIX.$id);
        if($json === null) {
            return null;
        }

        // Decodes the JSON-String into an associative-array (Essentially a Key-Value Structure)
        // See: https://www.php.net/manual/en/function.json-decode.php
        $data = null;
        try {
            $data = json_decode($json, true, flags: JSON_THROW_ON_ERROR);
        } catch (JsonException $e) {
            Log::error("json_decode failed inside of NoteModel find.\nException Message:\n".$e->getMessage());
            return null;
        }

        // Ensure that the decoded data is in the expected format
        if( !isset($data['id'])         ||  !is_string($data['id'])         ||
            !isset($data['email'])      ||  !is_string($data['email'])      ||
            !isset($data['content'])    ||  !is_string($data['content'])    ||
            !isset($data['tags'])       ||  !is_array($data['tags']))
        {
            Log::error("Decoded json data was not the expected format.\nInside of: NoteModel find(\$id)");
            return null;
        }

        // return a note based on the data inside the associative-array
        return new NoteModel(
            $data['id'],
            $data['email'],
            $data['content'],
            $data['tags']
        );
    }
}
